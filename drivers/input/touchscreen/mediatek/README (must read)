My touch panel driver happens to be mtk-tpd.
You should choose your own driver file at the respective location

This is what you must commit the following (for mtk-tpd):
(if you are unsure what to do here, just find out how to add sweep2wake module to your kernel, these commits are similar)
(note the commit is only the part included between the hashed lines)

---
 drivers/input/touchscreen/mediatek/mtk_tpd.c



Diff 1)
#######################################################
 #include <asm/uaccess.h>
 #include <linux/fb.h>
 
+#ifdef CONFIG_TOUCHSCREEN_PREVENT_SLEEP
+#ifdef CONFIG_TOUCHSCREEN_TRACE2WAKE
+#include <linux/input/trace2wake.h>
+#endif
+#endif
+
 #ifdef CONFIG_COMPAT
 #include <linux/compat.h>
 #endif
#######################################################



Diff 2)
#######################################################
 #ifndef CONFIG_HAS_EARLYSUSPEND
 static int tpd_suspend_flag = 0;
 #endif
+#ifdef CONFIG_TOUCHSCREEN_PREVENT_SLEEP
+#include <cust_eint.h>
+void (*nyx_suspend) (struct early_suspend *h);
+void (*nyx_resume) (struct early_suspend *h);
+#endif
 extern void tpd_button_init(void);
 
 /* int tpd_load_status = 0; //0: failed, 1: sucess */
#######################################################




Diff 3)
#######################################################
 		device_create_file(dev, attrs->attr[--num]);
 }
 
+#ifdef CONFIG_TOUCHSCREEN_PREVENT_SLEEP
+
+static void eros_suspend(struct early_suspend *h) {
+#if defined(CONFIG_TOUCHSCREEN_TRACE2WAKE)
+	bool prevent_sleep = false;
+#endif
+	/*
+	 * we're taking a gamble here and assuming that the suspend/resume calls will
+	 * be correctly made by the kernel everytime screen suspend/resume is made.
+	 *
+	 * If it doesn't, well, that breaks things.
+	 *
+	 */
+#if defined(CONFIG_TOUCHSCREEN_TRACE2WAKE)
+	prevent_sleep = (t2w_switch > 0);
+	t2w_scr_suspended = true;
+#endif
+
+	if (prevent_sleep) {
+		mt_eint_unmask(CUST_EINT_TOUCH_PANEL_NUM);
+	} else {
+		nyx_suspend(h);
+	}
+}
+
+static void eros_resume(struct early_suspend *h) {
+#if defined(CONFIG_TOUCHSCREEN_TRACE2WAKE)
+	bool prevent_sleep = false;
+#endif
+#if defined(CONFIG_TOUCHSCREEN_TRACE2WAKE)
+	prevent_sleep = (t2w_switch > 0);
+	t2w_scr_suspended = false;
+#endif
+
+	if (prevent_sleep) {
+		mt_eint_mask(CUST_EINT_TOUCH_PANEL_NUM);
+		/*
+		 * now that we've masked back CUST_EINT_TOUCH_PANEL_NUM, a touch panel reset
+		 * needs to be called. However, since sprout has 5 different panels, just
+		 * call a suspend/resume cycle to allow a normal ctp reset.
+		 * Time constraints shouldn't be much given just the GPIO's are cleared,
+		 * however, maybe we should just call _resume alone since the ctp driver
+		 * should be able to handle cases where the panel is already in _resume
+		 * but waiting for an IRQ flush (?) or a GPIO reset(?).
+		 *
+		 * This is similar to ft5x06_ts's panel behaviour during _HIBERNATE mode
+		 * where the ctp doesn't respond to anything but hard reset calls.
+		 *
+		 */
+		nyx_suspend(h);
+		nyx_resume(h);
+	} else {
+		nyx_resume(h);
+	}
+}
+
+#endif
+
+
 /* touch panel probe */
 static int tpd_probe(struct platform_device *pdev)
 {
#########################################################



Diff 4)
#########################################################
 	MTK_TS_early_suspend_handler.suspend = g_tpd_drv->suspend;
 	MTK_TS_early_suspend_handler.resume = g_tpd_drv->resume;
 #ifdef CONFIG_EARLYSUSPEND
+#ifdef CONFIG_TOUCHSCREEN_PREVENT_SLEEP
+	if ((g_tpd_drv->suspend != NULL) && (g_tpd_drv->resume != NULL)) {
+ 	 	nyx_suspend = g_tpd_drv->suspend;
+		nyx_resume  = g_tpd_drv->resume;
+		MTK_TS_early_suspend_handler.suspend = eros_suspend;
+		MTK_TS_early_suspend_handler.resume  = eros_resume;
+	}
+#endif
 	register_early_suspend(&MTK_TS_early_suspend_handler);
 #endif
 #endif
###########################################################




Diff 5)
############################################################
 		TPD_DMESG("register fb_notifier fail!\n");
 #endif
 #endif
+#ifdef CONFIG_TOUCHSCREEN_PREVENT_SLEEP
+	if ((g_tpd_drv->suspend != NULL) && (g_tpd_drv->resume != NULL)) {
+		if ((nyx_suspend == NULL) && (nyx_resume == NULL)) {
+			/*
+			 * in case nyx_suspend || nyx_resume != NULL
+			 * they have _suspend|_resume functions in them;
+			 * in which case leave them alone.
+			 */
+			nyx_suspend = g_tpd_drv->suspend;
+			nyx_resume  = g_tpd_drv->resume;
+			g_tpd_drv->suspend = eros_suspend;
+			g_tpd_drv->resume  = eros_resume;
+		}
+	}
+#endif
 /* #ifdef TPD_TYPE_CAPACITIVE */
 	/* TPD_TYPE_CAPACITIVE handle */
 	if (touch_type == 1) {
############################################################
